# -*- coding: utf-8 -*-
"""Assignment9 final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yBMyIVCb3J9l8eDY_wGREzhQhIlibUyx

**Your Name**: **Duncan**

<div style="background-color:#f2d7d5">

# Assignment 9: Pandas Merging DataFrames, Summaries, and Visualization
## Instructions:
- Work with your assigned group to submit a single document, although all group members will submit their own assignments on blackboard
- Due date: Friday April 28 by 7:00pm
- Your Jupyter notebook file (it has an `ipynb` extension) must be uploaded using Blackboard Assignments.
- Please start work ASAP as technical difficulties may arise requiring a little time to resolve.
- Post any problems you encounter on the course [issue tracker](https://code.wm.edu/econ/160/issues/-/issues).

<div style="background-color:#f2d7d5">

## Rating students in your group

For each person in your group, please provide a rating of your fellow group members' contributions to this assignment.  The rating is on a five point scale, as follows:

- `1` : group member did much less than their share of the work
- `2` : group member did less than their share of the work
- `3` : group member did their share of the work 
- `4` : group member did more than their share of the work
- `5` : group member did much more than their share of the work.

For each member of your group (excluding yourself), enter your rating:

- Name: Thomas,    Rating: 3
- Name: Peter,    Rating: 3

<div style="background-color:#f2d7d5">

**General instructions for this assignment** 
- Use comments to annotate and explain the steps in your code.
- Some of the work on this assignment will require you to expand beyond what we've covered in class, so you might need to do some web searching.
- Do not under any circumstances reorder, reformat, or change the instruction cells (the ones in light red)

In the code cell below, we import all the python packages that we'll need for this notebook:
"""

# we will be using geopandas
!pip install geopandas

"""<div style="background-color:#f2d7d5">
    
The following installs US Census maps for states and counties obtained from the official [US Census GeoSpatial webpage](https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html). 
    
Note: if you move this notebook you must also move the `data` folder and all contents to the new location. This code is **only** guaranteed to work on `jupyterhub` or a linux machine (and probably a mac). You are not required to understand the code, but it is

1. Creating the `data` directory if it doesn't exist
2. Downloading the map data
3. Since the data is a zip file, unzip the data
4. Move back to the original folder location
"""

# Run this, but not required to know what it is doing
import os as os

# create data directory if it doesn't exist 
try:
    os.mkdir('./data')
except:
    None
# move to data directory    
_ = os.chdir('./data')
# download the geospatial files into data directory
_ = os.system('wget https://econ.pages.code.wm.edu/160/python/data/cb_2018_us_county_5m.zip')
_ = os.system('wget https://econ.pages.code.wm.edu/160/python/data/cb_2018_us_nation_5m.zip')
# unzip 
_ = os.system('unzip cb_2018_us_county_5m.zip')
_ = os.system('unzip cb_2018_us_nation_5m.zip')
# move back to parent directory
_ = os.chdir('..')

import pandas as pd
import geopandas as gpd

# Using seaborn styles really improves plotting in my opinion
# There are five preset seaborn themes: darkgrid, whitegrid, dark, white, and ticks
import seaborn as sbn
sbn.set_style(style='white')

"""<div style="background-color:#f2d7d5">

This week we'll again be using data from the US Acid Rain Program, a pollution permit trading program for meeting aggressive sulfur oxide reductions aimed at reducing acid rain.  The Acid Rain Program is **the world's first** experiment in cap and trade (or pollution permit trading).  All participants in the Acid Rain Program are **electrical power generation facilities**.

The data source is [the clean air markets program data website at the EPA](https://campd.epa.gov/).
"""

emissions = pd.read_csv('https://econ.pages.code.wm.edu/160/python/data/monthly-emissions-epa.csv', low_memory=False)

"""<div style="background-color:#f2d7d5">

We will also be opening the `facilities` dataframe that has detailed information about each polluting unit.
"""

facilities = pd.read_csv('https://econ.pages.code.wm.edu/160/python/data/facility-attributes-epa.csv')

"""The [data dictionaries from the EPA](https://campd.epa.gov/help-support/glossary) for these files can be found in the following two dataframes:"""

emissions_ddict = pd.read_excel('https://econ.pages.code.wm.edu/160/python/data/clean_air_program_data_dictionary.xlsx',
                                sheet_name='Monthly Emissions', skiprows=1)
emissions_ddict.head(30)

facilities_ddict = pd.read_excel('https://econ.pages.code.wm.edu/160/python/data/clean_air_program_data_dictionary.xlsx',
                                sheet_name='FacilityUnit Attr', skiprows=1)
facilities_ddict.head(30)

"""<div style="background-color:#f2d7d5">

# Part A: Data Cleanup and Data Prep

<div style="background-color:#f2d7d5">

Using code from the previous assignment clean the columns in the `emissions` dataframe.
"""

emissions.columns = [i.replace(" ", "_").lower().replace(")","").replace("(","").replace("'","").\
                   replace(",","").replace("/mmbtu","").replace("_1000_lb","").replace("_lbs","").\
                     replace("co2_rate_short_tons","co2_rate") for i in emissions.columns.to_list()]
emissions.columns

"""<div style="background-color:#f2d7d5">

- Include a datetime column called `date` based on `year` and `month` as we did in the previous assignment.
"""

emissions_datetime = pd.to_datetime(dict(year=emissions.year, month=emissions.month, day = 1))
emissions['date'] = emissions_datetime

"""<div style="background-color:#f2d7d5">

- Again using findings from the previous assignment, what is the unit of analysis of this dataframe (what is each row describing?)

This dataframe has monthly emission rates and totals for various pollutants (carbon and sulfur oxides) for each pollution source in the US.

<div style="background-color:#f2d7d5">

Clean and inventory the `facility` dataframe.

- clean the facility variable names
"""

facilities.columns.to_list()

facilities.columns = [i.replace(" ", "_").lower().replace(")","").replace("(","").replace("'","").\
                   replace(",","").replace("_mmbtu/hr","").replace("_mwe","") for i in facilities.columns.to_list()]
facilities.columns

"""<div style="background-color:#f2d7d5">
    
Examine datatypes for each column
"""

facilities.info()

"""<div style="background-color:#f2d7d5">
    
Investigate the geographic and temporal extent of the data    
"""

len(facilities.state.value_counts())

facilities.year.value_counts()

"""There are 50 state values (one for each state) and the data covers 2000-2022.

<div style="background-color:#f2d7d5">

Summarize the dataframe
"""

facilities.describe()

"""<div style="background-color:#f2d7d5">

Describe the unit of analysis for the facilities dataframe.

The facilities data has annual observations per polluting unit.

<div style="background-color:#f2d7d5">

## Part B: Merging `emissions` and `facilities`.

<div style="background-color:#f2d7d5">

Among other things, we want to visualize the spatial distribution of polluting facilities.  To do that we need to link the pollution data in `emissions` to the spatial location (in `latitude` and `longitude`) in `facilities` for each unit.  We want to be able to construct a map for a given state and month, plotting emissions data for each unit, by adding `latitude` and `longitude` to emissions so we can construct the map.
    
To that end, what is the unit of analysis needed for the merged data (what will a row represent after your merge the `facilities` and `emissions` dataframes)?

Unit of Analysis: monthly emission rates and totals for various pollutants (carbon and sulfur oxides) for each pollution source in the US labeled by longitude and latitude.
"""

emissions.info()

facilities.info()

"""<div style="background-color:#f2d7d5">

What variables in `emissions` and `facilities` will allow you to merge the dataframe (what are the `keys`)?

state, facility_name, facility_id, year

<div style="background-color:#f2d7d5">
    
Based on your findings above, preview your merge operation.

Note we will need only the following fields from `facilities`:
- `facility_id`
- `unit_id`
- `year`
- `latitude`
- `longitude`    

Note we will need only the following fields from `emissions`:
- `facility_id`
- `unit_id`
- `year`
- `so2_mass_short_tons`
- `co2_mass_short_tons`
- `primary_fuel_type`
- `gross_load_mwh`
"""

facilities = facilities[['latitude','longitude', 'year','unit_id','facility_id', 'state']]

emissions = emissions[['facility_id', 'unit_id', 'year', 'so2_mass_short_tons', 'co2_mass_short_tons', 'primary_fuel_type', 'gross_load_mwh', 'date', 'state']]

emissions.merge(facilities, on=['facility_id', 'unit_id','year', 'state'], how='left', indicator = True)

"""<div style="background-color:#f2d7d5">
    
Preview your merge operation (make sure `indicator=True` in the merge method) and count the occurences of each type of merge indicator.  Think about your results and comment on whether this report confirms your merge is working.
"""

emissions.merge(facilities, on=['facility_id', 'unit_id','year', 'state'], how='left', indicator = True).value_counts('_merge')

"""This is good that all merges are from both as that means each row from emissions was matched to a row from facilities.

<div style="background-color:#f2d7d5">

Once you are happy with your result, create a new dataframe (`emissions_`) that has the newly merged lat,lon fields.
"""

emissions_ = emissions.merge(facilities, on=['facility_id', 'unit_id','year', 'state'], how='left', indicator = True)

"""<div style="background-color:#f2d7d5">

As a final check, compare summaries and rows of data in `emissions` and `emissions_` to ensure the merge hasn't fundamentally altered your monthly emissions data in unexpected ways. Apart from having the new latitude and longitude data the original columns in `emissions` should be identical to those in `emissions_`.
"""

emissions.head().describe()

emissions_.head().describe()

"""All columns are the same except for the additional latitude and longitude in emissions_

<div style="background-color:#f2d7d5">

## Part C: Mapping polluters and emissions in Virginia

<div style="background-color:#f2d7d5">
    
Next we will use `geopandas` to plot the emissions data.  Using techniques described in class, create a geopandas dataframe for plotting (call it `emissions_geo`).  Preview the results using `head` and see what additional information is added to your dataframe (hopefully geospatial information).

> When you create your `geopandas` dataframe, use the `geometry=gpd.points_from_xy` option (this is a geopandas function for creating a spatial information from latitude and logitude coordinates) that you will need to google for syntax details.
"""

import matplotlib.pyplot as plt

geometry = gpd.points_from_xy(emissions_['longitude'], emissions_['latitude'])

emissions_geo = gpd.GeoDataFrame(emissions_, geometry=geometry)
emissions_geo.head()

"""<div style="background-color:#f2d7d5">
    
Use the state-level shapefile we downloaded at the top of this notebook (`cb_2018_us_nation_5m.shp`).  Zoom/restrict the plot to the lower 48.
    
Note:
    
1. The plot x and y limits can be set by "setting xlimits".  Since the units are in lat/lon coordinates, it should be easy to adjust this.
2. Another option is to look inside the geodataframe and limit it to states using row subsetting techniques we use just like in pandas
"""

nation = gpd.read_file('data/cb_2018_us_nation_5m.shp')
nation.plot()

nation.head()

#Restrict to the lower 48
lower48 = nation.loc[~nation['NAME'].isin(['Alaska', 'Hawaii'])]

#Plot the lower 48
fig, ax = plt.subplots(1,1, figsize=(10, 10))
lower48.plot(ax=ax, color='white', edgecolor='black')

#Set the x and y limits of the plot to focus on the lower 48 states
ax.set_xlim([-130, -65])
ax.set_ylim([23, 50])

#Add a title to the plot
ax.set_title('Lower 48 States')

"""<div style="background-color:#f2d7d5">
    
Next, plot your emissions points for August 2022 on top of your US map.
"""

#merge on common variable geometry
nation_plot = nation.merge(emissions_geo, on = ['geometry'], how = 'right')

#create August 2022 emissions points not including Hawaii and Alaska
emissions_points = nation_plot.query("date == '2022-08' and state != 'HI' and state != 'AK'")[['state']].value_counts().reset_index()

#merge August 2022 emissions points to nation
state_plot = nation_plot.merge(emissions_points, on = ['state'], how = 'left')

#rename merged emission point totals to count 
state_plot.rename(columns = {0: 'count'}, inplace = True)

#preview emissions points for August 2022
state_plot.query("date == '2022-08'").plot(column='count', edgecolor='black',legend=True)

#Plot August 2022 emissions points onto lower 48 outline

#Restrict to the lower 48
lower48 = nation.loc[~nation['NAME'].isin(['Alaska', 'Hawaii'])]

#Plot the lower 48
fig, ax = plt.subplots(1,1, figsize=(10, 10))
lower48.plot(ax=ax, color='white', edgecolor='black')

#Plot emissions points on lower 48 outline by adding "ax=ax"; make legend smaller with last piece of code
state_plot.query("date == '2022-08'").plot(ax = ax, column='count', edgecolor='black',legend=True, legend_kwds={'shrink': 0.5})

#Set the x and y limits of the plot to focus on the lower 48 states
ax.set_xlim([-130, -65])
ax.set_ylim([23, 50])

#Add a title to the plot
ax.set_title('Emissions for Lower 48 States in August 2022')

#show plot
plt.show()

"""<div style="background-color:#f2d7d5">
    
Zoom into the Mid-Atlantic region and examine geographical distribution by `primary_fuel_type` by **coloring** the points by fuel type and providing a legend.
    
> Note: for map aesthetics, you might need to get into the underbelly of `matplotlib` (what `geopandas` is using to draw the plots). You might need to search for legend options such as `loc` (where it is drawn in the figure), `fontsize` (size of fonts in the legend), and perhaps `ncols` (number of columns in the legend).  These are used by `geopandas` using `legend_kwds`.
"""

# Subset emissions dataframe to mid-atlantic states
mid_atlantic_states = ['PA', 'DE', 'MD', 'VA', 'WV', 'NJ', 'NY']
mid_atlantic_emissions = state_plot.loc[state_plot['state'].isin(mid_atlantic_states)]

# Create GeoDataFrame with Mid-Atlantic emissions coordinates
ma_geometry = gpd.points_from_xy(mid_atlantic_emissions['longitude'], mid_atlantic_emissions['latitude'])
ma_emissions_geo = gpd.GeoDataFrame(mid_atlantic_emissions, geometry=ma_geometry)

# Restrict to the lower 48
lower48 = nation.loc[~nation['NAME'].isin(['Alaska', 'Hawaii'])]

# Plot the lower 48
fig, ax = plt.subplots(1,1, figsize=(10, 10))
lower48.plot(ax=ax, color='white', edgecolor='black')

# Plot 2022 emissions points, colored by primary_fuel_type
ma_emissions_geo.query("date == '2022-08'").plot(ax=ax, column='primary_fuel_type', legend=True)

# Set the x and y limits of the plot to focus on the Mid-Atlantic Region
ax.set_xlim([-85, -65])
ax.set_ylim([30, 50])

# Add a title to the plot
ax.set_title('2022 Emissions by Primary Fuel Type in Mid-Atlantic Region')

# Show the plot
plt.show()

"""<div style="background-color:#f2d7d5">
    
For the same plot, examine year 2000 rather than 2022. Comment on the differences you are seeing.
    
"""

#Restrict to the lower 48
lower48 = nation.loc[~nation['NAME'].isin(['Alaska', 'Hawaii'])]

#Plot the lower 48
fig, ax = plt.subplots(1,1, figsize=(10, 10))
lower48.plot(ax=ax, color='white', edgecolor='black')

# Plot 2000 emissions points, colored by primary_fuel_type
ma_emissions_geo.query("date == '2000-08'").plot(ax=ax, column='primary_fuel_type', legend=True)

#Set the x and y limits of the plot to focus on the Mid-Atlantic Region
ax.set_xlim([-85, -65])
ax.set_ylim([30, 50])

# Add a title to the plot
ax.set_title('2000 Emissions by Primary Fuel Type in Mid-Atlantic Region')

# Show the plot
plt.show()

"""There is a lot more natural gas present in 2022 as opposed to a lot more coal and oil in 2000. This makes sense as there has been a much larger push for cleaner emissions in the past 20 years or so.

<div style="background-color:#f2d7d5">
    
Using the county-level map (`cb_2018_us_county_5m.shp`), focus in on Virginia (`STATEFPS` is 51) and plot the facilities by primary fuel type for August 2022 and 2000. Include titles so a reader can tell the time periods apart. Try to scale the size of the points based on the `gross_load_mwh/1000` (amount of electricity produced).  What has changed?
"""

counties = gpd.read_file('./data/cb_2018_us_county_5m.shp')

#prep for merging
counties['STATEFP'] = counties['STATEFP'].astype(float)
counties['COUNTYFP'] = counties['COUNTYFP'].astype(float)

#get just VA counties
va_counties = counties[counties.STATEFP == 51]

#get fips codes so we can merge emissions to counties on fips
fips = pd.read_csv('http://www2.census.gov/geo/docs/reference/codes/files/national_county.txt',
                         names=['state','state_fips','county_fips','county','fips_class_code'],
                         header=None)

#get August 2022 dates
geo_2022 = emissions_geo.query("date == '2022-08'")

#merge fips codes into August 2022 dates
fuel_2022_fips = geo_2022.merge(fips, how = 'left', on = 'state')

#merge fips August 2022 dates into VA counties
counties_plot = va_counties.merge(fuel_2022_fips, how = 'right', left_on = ['STATEFP','COUNTYFP', 'geometry'], right_on = ['state_fips','county_fips', 'geometry'], indicator = 'merges')

#get just Virginia
va_counties_plot = counties_plot.query("state_fips == 51")

#Get counts of fuel type by facility
vac_plot = va_counties_plot[['facility_id','primary_fuel_type']].value_counts().reset_index()

#rename column to count
vac_plot.rename(columns = {0: 'count'}, inplace = True)

#merge facility emissions data back into data with geometry points
final_plot_2022 = va_counties_plot.merge(vac_plot, how = 'left', left_on = ['facility_id','primary_fuel_type'], right_on = ['facility_id','primary_fuel_type'], indicator = 'merger')

#Do the same thing for August 2000

#get August 2000 dates
geo_2000 = emissions_geo.query("date == '2000-08'")

#merge fips codes into August 2000 dates
fuel_2000_fips = geo_2000.merge(fips, how = 'left', on = 'state')

#merge fips August 2000 dates into VA counties
counties_plot = va_counties.merge(fuel_2000_fips, how = 'right', left_on = ['STATEFP','COUNTYFP', 'geometry'], right_on = ['state_fips','county_fips', 'geometry'], indicator = '2000_merges')

#get just Virginia
va_counties_plot = counties_plot.query("state_fips == 51")

#Get counts of fuel type by facility
vac_plot = va_counties_plot[['facility_id','primary_fuel_type']].value_counts().reset_index()

#rename column to count
vac_plot.rename(columns = {0: 'count'}, inplace = True)

#merge geometry data back into
final_plot_2000 = va_counties_plot.merge(vac_plot, how = 'left', left_on = ['facility_id','primary_fuel_type'], right_on = ['facility_id','primary_fuel_type'], indicator = '2000_merger')

#Create 2 subplots for each year
fig, (ax_2022, ax_2000) = plt.subplots(1,2, figsize=(12,5))

#plot VA counties
va_counties.plot(edgecolor='black', color='white', ax = ax_2022, legend=True)
va_counties.plot(edgecolor='black', color='white', ax = ax_2000, legend=True)

#plot fuel type points onto VA counties
final_plot_2022.plot(column='primary_fuel_type', edgecolor='black',legend=True, ax = ax_2022)
final_plot_2000.plot(column='primary_fuel_type', edgecolor='black',legend=True, ax = ax_2000)

#set titles
ax_2022.set_title('2022 Primary Fuel Types by Facility', fontsize=14)
ax_2000.set_title('2000 Primary Fuel Types by Facility', fontsize=14)

#clean up
plt.tight_layout()

#show
plt.show()

#Create 2 subplots for each year, scaled by electricity use of emissions
fig, (ax_2022_scaled, ax_2000_scaled) = plt.subplots(1,2, figsize=(12,5))

#plot VA counties
va_counties.plot(edgecolor='black', color='white', ax = ax_2022_scaled, legend=True)
va_counties.plot(edgecolor='black', color='white', ax = ax_2000_scaled, legend=True)

#plot scaled fuel type points onto VA counties
final_plot_2022.plot(column='primary_fuel_type', edgecolor='black',legend=True, ax = ax_2022_scaled, s=final_plot_2022['gross_load_mwh'] * 0.001)
final_plot_2000.plot(column='primary_fuel_type', edgecolor='black',legend=True, ax = ax_2000_scaled, s=final_plot_2000['gross_load_mwh'] * 0.001)

#set titles
ax_2022_scaled.set_title('2022 Primary Fuel Types by Facility, Scaled by Electricity Produced', fontsize=11)
ax_2000_scaled.set_title('2000 Primary Fuel Types by Facility, Scaled by Electricity Produced', fontsize=11)

#clean up
plt.tight_layout()

#show
plt.show()

"""**What has changed?**

The ability to scale our results by how much electricity each fuel type produces allows us to draw some conclusions. One glaring one is how much more emphasized pipeline natural gas is in 2022(pink) as compared to 2000(brown). There were still multiple spots utilizing pipeline natural gas in 2000, but scaling has showed us that it isn't even close to the amount being produced in 2022. You can also clearly see the coal hotspots from the 2000 graph almost entirely disappear and be replaced by natural gases. This again reflects the more environmentally friendly approach adopted by the country in recent years

"""